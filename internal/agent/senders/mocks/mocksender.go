// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/invinciblewest/metrics/internal/agent/senders (interfaces: Sender)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/invinciblewest/metrics/internal/models"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// SendMetric mocks base method.
func (m *MockSender) SendMetric(arg0 context.Context, arg1 []models.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMetric indicates an expected call of SendMetric.
func (mr *MockSenderMockRecorder) SendMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetric", reflect.TypeOf((*MockSender)(nil).SendMetric), arg0, arg1)
}
